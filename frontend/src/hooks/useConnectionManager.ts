import { useEffect, useCallback, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { AppDispatch } from '../store/store';\nimport { getConnectionManager, ConnectionManagerOptions } from '../services/connectionManager';\nimport { BrokerConfig, ConnectionStatus } from '../store/broker/brokerSlice';\n\nexport interface UseConnectionManagerOptions extends ConnectionManagerOptions {\n  autoStart?: boolean;\n}\n\nexport interface ConnectionManagerHook {\n  startMonitoring: (config: BrokerConfig) => void;\n  stopMonitoring: (configId: string) => void;\n  isMonitoring: (configId: string) => boolean;\n  retryCount: number;\n  stats: {\n    monitoredConfigs: number;\n    totalRetries: number;\n    activeRetries: number;\n  };\n  addStatusListener: (configId: string, listener: (status: ConnectionStatus) => void) => void;\n  removeStatusListener: (configId: string, listener: (status: ConnectionStatus) => void) => void;\n}\n\nexport const useConnectionManager = (\n  config?: BrokerConfig,\n  options: UseConnectionManagerOptions = {}\n): ConnectionManagerHook => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [retryCount, setRetryCount] = useState(0);\n  const [stats, setStats] = useState({\n    monitoredConfigs: 0,\n    totalRetries: 0,\n    activeRetries: 0\n  });\n\n  const connectionManager = getConnectionManager(dispatch);\n\n  // Update stats periodically\n  useEffect(() => {\n    const updateStats = () => {\n      const currentStats = connectionManager.getStats();\n      setStats(currentStats);\n      \n      if (config) {\n        setRetryCount(connectionManager.getRetryCount(config.id));\n      }\n    };\n\n    // Update immediately\n    updateStats();\n\n    // Update every 5 seconds\n    const interval = setInterval(updateStats, 5000);\n\n    return () => clearInterval(interval);\n  }, [connectionManager, config]);\n\n  // Auto-start monitoring if config is provided and autoStart is true\n  useEffect(() => {\n    if (config && options.autoStart !== false && config.isConnected) {\n      connectionManager.startMonitoring(config);\n      \n      return () => {\n        connectionManager.stopMonitoring(config.id);\n      };\n    }\n  }, [config, options.autoStart, connectionManager]);\n\n  const startMonitoring = useCallback((brokerConfig: BrokerConfig) => {\n    connectionManager.startMonitoring(brokerConfig);\n  }, [connectionManager]);\n\n  const stopMonitoring = useCallback((configId: string) => {\n    connectionManager.stopMonitoring(configId);\n  }, [connectionManager]);\n\n  const isMonitoring = useCallback((configId: string) => {\n    return connectionManager.isMonitoring(configId);\n  }, [connectionManager]);\n\n  const addStatusListener = useCallback((configId: string, listener: (status: ConnectionStatus) => void) => {\n    connectionManager.addStatusListener(configId, listener);\n  }, [connectionManager]);\n\n  const removeStatusListener = useCallback((configId: string, listener: (status: ConnectionStatus) => void) => {\n    connectionManager.removeStatusListener(configId, listener);\n  }, [connectionManager]);\n\n  return {\n    startMonitoring,\n    stopMonitoring,\n    isMonitoring,\n    retryCount,\n    stats,\n    addStatusListener,\n    removeStatusListener\n  };\n};\n\n// Hook for monitoring multiple configurations\nexport const useMultiConnectionManager = (\n  configs: BrokerConfig[],\n  options: UseConnectionManagerOptions = {}\n) => {\n  const dispatch = useDispatch<AppDispatch>();\n  const [configStats, setConfigStats] = useState<Record<string, { retryCount: number; isMonitoring: boolean }>>({});\n  const [globalStats, setGlobalStats] = useState({\n    monitoredConfigs: 0,\n    totalRetries: 0,\n    activeRetries: 0\n  });\n\n  const connectionManager = getConnectionManager(dispatch);\n\n  // Monitor all connected configs\n  useEffect(() => {\n    const connectedConfigs = configs.filter(config => config.isConnected);\n    \n    if (options.autoStart !== false) {\n      connectedConfigs.forEach(config => {\n        connectionManager.startMonitoring(config);\n      });\n    }\n\n    return () => {\n      connectedConfigs.forEach(config => {\n        connectionManager.stopMonitoring(config.id);\n      });\n    };\n  }, [configs, options.autoStart, connectionManager]);\n\n  // Update stats for all configs\n  useEffect(() => {\n    const updateStats = () => {\n      const newConfigStats: Record<string, { retryCount: number; isMonitoring: boolean }> = {};\n      \n      configs.forEach(config => {\n        newConfigStats[config.id] = {\n          retryCount: connectionManager.getRetryCount(config.id),\n          isMonitoring: connectionManager.isMonitoring(config.id)\n        };\n      });\n      \n      setConfigStats(newConfigStats);\n      setGlobalStats(connectionManager.getStats());\n    };\n\n    updateStats();\n    const interval = setInterval(updateStats, 5000);\n\n    return () => clearInterval(interval);\n  }, [configs, connectionManager]);\n\n  const startMonitoring = useCallback((config: BrokerConfig) => {\n    connectionManager.startMonitoring(config);\n  }, [connectionManager]);\n\n  const stopMonitoring = useCallback((configId: string) => {\n    connectionManager.stopMonitoring(configId);\n  }, [connectionManager]);\n\n  const startAllMonitoring = useCallback(() => {\n    configs.filter(config => config.isConnected).forEach(config => {\n      connectionManager.startMonitoring(config);\n    });\n  }, [configs, connectionManager]);\n\n  const stopAllMonitoring = useCallback(() => {\n    configs.forEach(config => {\n      connectionManager.stopMonitoring(config.id);\n    });\n  }, [configs, connectionManager]);\n\n  return {\n    startMonitoring,\n    stopMonitoring,\n    startAllMonitoring,\n    stopAllMonitoring,\n    configStats,\n    globalStats,\n    addStatusListener: connectionManager.addStatusListener.bind(connectionManager),\n    removeStatusListener: connectionManager.removeStatusListener.bind(connectionManager)\n  };\n};"