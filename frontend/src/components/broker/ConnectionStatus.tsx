import React, { useEffect, useState, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from '../../store/store';\nimport {\n  checkConnectionStatus,\n  refreshTokens,\n  disconnectBroker,\n  BrokerConfig,\n  ConnectionStatus as ConnectionStatusType,\n  TokenStatus\n} from '../../store/broker/brokerSlice';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { \n  Wifi, \n  WifiOff, \n  RefreshCw, \n  AlertTriangle, \n  CheckCircle, \n  Clock,\n  Shield,\n  Activity,\n  Zap\n} from 'lucide-react';\nimport { useToast } from '@/components/ui/use-toast';\n\ninterface ConnectionStatusProps {\n  config: BrokerConfig;\n  showActions?: boolean;\n  autoRefresh?: boolean;\n  refreshInterval?: number;\n  onStatusChange?: (status: ConnectionStatusType) => void;\n  onReconnectNeeded?: () => void;\n}\n\nconst ConnectionStatus: React.FC<ConnectionStatusProps> = ({\n  config,\n  showActions = true,\n  autoRefresh = true,\n  refreshInterval = 60000, // 1 minute\n  onStatusChange,\n  onReconnectNeeded\n}) => {\n  const dispatch = useDispatch<AppDispatch>();\n  const { loading, errors } = useSelector((state: RootState) => state.broker);\n  const { toast } = useToast();\n  \n  const [lastRefresh, setLastRefresh] = useState<Date | null>(null);\n  const [autoRefreshInterval, setAutoRefreshInterval] = useState<NodeJS.Timeout | null>(null);\n  const [retryCount, setRetryCount] = useState(0);\n  const [isRetrying, setIsRetrying] = useState(false);\n  const [healthScore, setHealthScore] = useState(100);\n\n  // Auto-refresh setup with exponential backoff on failures\n  useEffect(() => {\n    if (autoRefresh && config.id) {\n      // Clear existing interval\n      if (autoRefreshInterval) {\n        clearInterval(autoRefreshInterval);\n      }\n\n      // Calculate interval based on retry count (exponential backoff)\n      const currentInterval = Math.min(refreshInterval * Math.pow(2, retryCount), 300000); // Max 5 minutes\n\n      // Set up new interval\n      const interval = setInterval(() => {\n        handleRefreshStatus();\n      }, currentInterval);\n\n      setAutoRefreshInterval(interval);\n\n      // Initial refresh\n      handleRefreshStatus();\n\n      return () => {\n        if (interval) {\n          clearInterval(interval);\n        }\n      };\n    }\n  }, [config.id, autoRefresh, refreshInterval, retryCount]);\n\n  // Notify parent of status changes\n  useEffect(() => {\n    if (onStatusChange && config.connectionStatus) {\n      onStatusChange(config.connectionStatus);\n    }\n  }, [config.connectionStatus, onStatusChange]);\n\n  // Calculate health score based on connection stability\n  useEffect(() => {\n    const calculateHealthScore = () => {\n      let score = 100;\n      \n      // Reduce score based on connection state\n      if (config.connectionStatus?.state === 'error') score -= 50;\n      if (config.connectionStatus?.state === 'expired') score -= 30;\n      if (config.connectionStatus?.state === 'disconnected') score -= 70;\n      \n      // Reduce score based on retry count\n      score -= Math.min(retryCount * 10, 40);\n      \n      // Reduce score if token is expiring soon\n      if (config.tokenStatus?.status === 'expiring_soon') score -= 20;\n      if (config.tokenStatus?.status === 'expired') score -= 40;\n      \n      setHealthScore(Math.max(score, 0));\n    };\n    \n    calculateHealthScore();\n  }, [config.connectionStatus, config.tokenStatus, retryCount]);\n\n  const handleRefreshStatus = useCallback(async () => {\n    try {\n      await dispatch(checkConnectionStatus({ configId: config.id })).unwrap();\n      setLastRefresh(new Date());\n      setRetryCount(0); // Reset retry count on success\n      setIsRetrying(false);\n    } catch (error: any) {\n      console.error('Status refresh failed:', error);\n      setRetryCount(prev => prev + 1);\n      \n      // Show toast only for first few failures to avoid spam\n      if (retryCount < 3) {\n        toast({\n          title: \"Connection Check Failed\",\n          description: `Unable to verify connection status: ${error.message}`,\n          variant: \"destructive\",\n        });\n      }\n    }\n  }, [config.id, dispatch, retryCount, toast]);\n\n  const handleRefreshTokens = async () => {\n    try {\n      await dispatch(refreshTokens(config.id)).unwrap();\n      toast({\n        title: \"Tokens Refreshed\",\n        description: \"Authentication tokens have been successfully refreshed.\",\n      });\n      // Refresh status after token refresh\n      setTimeout(() => handleRefreshStatus(), 1000);\n    } catch (error: any) {\n      console.error('Token refresh failed:', error);\n      toast({\n        title: \"Token Refresh Failed\",\n        description: error.message || \"Failed to refresh authentication tokens.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDisconnect = async () => {\n    if (window.confirm('Are you sure you want to disconnect this broker? This will revoke all tokens and require re-authentication.')) {\n      try {\n        await dispatch(disconnectBroker(config.id)).unwrap();\n        toast({\n          title: \"Broker Disconnected\",\n          description: \"Your broker connection has been safely disconnected and tokens revoked.\",\n        });\n      } catch (error: any) {\n        console.error('Disconnect failed:', error);\n        toast({\n          title: \"Disconnect Failed\",\n          description: error.message || \"Failed to disconnect broker safely.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleRetryConnection = async () => {\n    setIsRetrying(true);\n    try {\n      // First try to refresh tokens if they're expired\n      if (config.tokenStatus?.status === 'expired' || config.tokenStatus?.status === 'expiring_soon') {\n        await handleRefreshTokens();\n      } else {\n        // Otherwise just refresh status\n        await handleRefreshStatus();\n      }\n    } catch (error) {\n      // If retry fails, suggest reconnection\n      if (onReconnectNeeded) {\n        onReconnectNeeded();\n      }\n    } finally {\n      setIsRetrying(false);\n    }\n  };\n\n  const getStatusDisplay = () => {\n    const status = config.connectionStatus;\n    if (!status) {\n      return {\n        color: 'text-gray-600',\n        bgColor: 'bg-gray-100',\n        borderColor: 'border-gray-200',\n        icon: <AlertTriangle className=\"h-4 w-4\" />,\n        label: 'Unknown',\n        description: 'Status unknown'\n      };\n    }\n\n    const statusMap = {\n      connected: {\n        color: 'text-green-600',\n        bgColor: 'bg-green-100',\n        borderColor: 'border-green-200',\n        icon: <Wifi className=\"h-4 w-4\" />,\n        label: 'Connected',\n        description: 'Broker connection is active and healthy'\n      },\n      connecting: {\n        color: 'text-blue-600',\n        bgColor: 'bg-blue-100',\n        borderColor: 'border-blue-200',\n        icon: <RefreshCw className=\"h-4 w-4 animate-spin\" />,\n        label: 'Connecting',\n        description: 'Establishing connection...'\n      },\n      disconnected: {\n        color: 'text-gray-600',\n        bgColor: 'bg-gray-100',\n        borderColor: 'border-gray-200',\n        icon: <WifiOff className=\"h-4 w-4\" />,\n        label: 'Disconnected',\n        description: 'Not connected to broker'\n      },\n      error: {\n        color: 'text-red-600',\n        bgColor: 'bg-red-100',\n        borderColor: 'border-red-200',\n        icon: <AlertTriangle className=\"h-4 w-4\" />,\n        label: 'Error',\n        description: 'Connection error occurred'\n      },\n      expired: {\n        color: 'text-orange-600',\n        bgColor: 'bg-orange-100',\n        borderColor: 'border-orange-200',\n        icon: <Clock className=\"h-4 w-4\" />,\n        label: 'Expired',\n        description: 'Authentication has expired'\n      }\n    };\n\n    return statusMap[status.state] || statusMap.disconnected;\n  };\n\n  const getTokenStatusDisplay = (tokenStatus?: TokenStatus) => {\n    if (!tokenStatus) return null;\n\n    const tokenStatusMap = {\n      valid: { color: 'text-green-600', icon: <Shield className=\"h-3 w-3\" />, label: 'Valid' },\n      expiring_soon: { color: 'text-yellow-600', icon: <Clock className=\"h-3 w-3\" />, label: 'Expiring Soon' },\n      expired: { color: 'text-red-600', icon: <AlertTriangle className=\"h-3 w-3\" />, label: 'Expired' },\n      no_token: { color: 'text-gray-600', icon: <WifiOff className=\"h-3 w-3\" />, label: 'No Token' },\n      error: { color: 'text-red-600', icon: <AlertTriangle className=\"h-3 w-3\" />, label: 'Error' }\n    };\n\n    return tokenStatusMap[tokenStatus.status] || tokenStatusMap.no_token;\n  };\n\n  const getHealthColor = (score: number) => {\n    if (score >= 80) return 'text-green-600';\n    if (score >= 60) return 'text-yellow-600';\n    if (score >= 40) return 'text-orange-600';\n    return 'text-red-600';\n  };\n\n  const statusDisplay = getStatusDisplay();\n  const tokenDisplay = getTokenStatusDisplay(config.tokenStatus);\n  const isLoading = loading.status || loading.refreshTokens || loading.disconnect || isRetrying;\n\n  return (\n    <Card className={`${statusDisplay.borderColor} transition-all duration-200`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            {statusDisplay.icon}\n            <span>Connection Status</span>\n            <Badge variant={config.connectionStatus?.state === 'connected' ? 'default' : 'secondary'}>\n              {statusDisplay.label}\n            </Badge>\n          </CardTitle>\n          \n          {/* Health Score */}\n          <div className=\"flex items-center gap-2\">\n            <Activity className={`h-4 w-4 ${getHealthColor(healthScore)}`} />\n            <span className={`text-sm font-medium ${getHealthColor(healthScore)}`}>\n              {healthScore}%\n            </span>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {/* Status Message */}\n        <div className={`p-3 rounded-lg ${statusDisplay.bgColor}`}>\n          <p className={`text-sm font-medium ${statusDisplay.color}`}>\n            {config.connectionStatus?.message || statusDisplay.description}\n          </p>\n        </div>\n\n        {/* Token Status */}\n        {tokenDisplay && (\n          <div className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center gap-2\">\n              {tokenDisplay.icon}\n              <span className={tokenDisplay.color}>Token: {tokenDisplay.label}</span>\n            </div>\n            {config.tokenStatus?.expiresAt && (\n              <span className=\"text-gray-500\">\n                Expires: {new Date(config.tokenStatus.expiresAt).toLocaleString()}\n              </span>\n            )}\n          </div>\n        )}\n\n        {/* Connection Details */}\n        <div className=\"grid grid-cols-2 gap-4 text-sm text-gray-600\">\n          <div>\n            <span className=\"font-medium\">Last Checked:</span>\n            <br />\n            {config.connectionStatus?.lastChecked \n              ? new Date(config.connectionStatus.lastChecked).toLocaleString()\n              : 'Never'\n            }\n          </div>\n          <div>\n            <span className=\"font-medium\">Auto-refresh:</span>\n            <br />\n            {autoRefresh ? `Every ${Math.round(refreshInterval / 1000)}s` : 'Disabled'}\n          </div>\n        </div>\n\n        {/* Retry Information */}\n        {retryCount > 0 && (\n          <Alert>\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              Connection issues detected. Retry attempts: {retryCount}\n              {retryCount >= 3 && \" (Consider reconnecting if issues persist)\"}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Action Buttons */}\n        {showActions && (\n          <div className=\"flex flex-wrap gap-2\">\n            {/* Refresh Status Button */}\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleRefreshStatus}\n              disabled={isLoading}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${loading.status ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n\n            {/* Connection-specific actions */}\n            {config.connectionStatus?.state === 'connected' && (\n              <>\n                {config.tokenStatus?.status === 'expiring_soon' && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleRefreshTokens}\n                    disabled={loading.refreshTokens}\n                  >\n                    <Zap className=\"h-4 w-4 mr-2\" />\n                    {loading.refreshTokens ? 'Refreshing...' : 'Refresh Token'}\n                  </Button>\n                )}\n                \n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={handleDisconnect}\n                  disabled={loading.disconnect}\n                >\n                  <WifiOff className=\"h-4 w-4 mr-2\" />\n                  {loading.disconnect ? 'Disconnecting...' : 'Disconnect'}\n                </Button>\n              </>\n            )}\n\n            {/* Retry/Reconnect actions */}\n            {(config.connectionStatus?.state === 'error' || config.connectionStatus?.state === 'expired') && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleRetryConnection}\n                disabled={isRetrying}\n              >\n                <RefreshCw className={`h-4 w-4 mr-2 ${isRetrying ? 'animate-spin' : ''}`} />\n                {isRetrying ? 'Retrying...' : 'Retry Connection'}\n              </Button>\n            )}\n\n            {retryCount >= 3 && onReconnectNeeded && (\n              <Button\n                variant=\"default\"\n                size=\"sm\"\n                onClick={onReconnectNeeded}\n              >\n                <Wifi className=\"h-4 w-4 mr-2\" />\n                Reconnect\n              </Button>\n            )}\n          </div>\n        )}\n\n        {/* Auto-refresh indicator */}\n        {autoRefresh && config.connectionStatus?.state === 'connected' && (\n          <div className=\"flex items-center justify-center text-xs text-gray-400 pt-2\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n              <span>Live monitoring active</span>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ConnectionStatus;"