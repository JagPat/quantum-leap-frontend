import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from '../../store/store';\nimport {\n  fetchBrokerConfigs,\n  setSelectedConfig,\n  setShowSetupModal,\n  BrokerConfig\n} from '../../store/broker/brokerSlice';\nimport { useConnectionManager, useMultiConnectionManager } from '../../hooks/useConnectionManager';\nimport ConnectionStatus from './ConnectionStatus';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { \n  Plus, \n  Settings, \n  Activity, \n  TrendingUp, \n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Wifi,\n  WifiOff\n} from 'lucide-react';\nimport { useToast } from '@/components/ui/use-toast';\n\ninterface BrokerManagerProps {\n  userId: string;\n  onConfigSelect?: (config: BrokerConfig | null) => void;\n  onSetupNeeded?: () => void;\n  showConnectionDetails?: boolean;\n}\n\nconst BrokerManager: React.FC<BrokerManagerProps> = ({\n  userId,\n  onConfigSelect,\n  onSetupNeeded,\n  showConnectionDetails = true\n}) => {\n  const dispatch = useDispatch<AppDispatch>();\n  const { toast } = useToast();\n  const {\n    configs,\n    selectedConfigId,\n    loading,\n    errors\n  } = useSelector((state: RootState) => state.broker);\n\n  const [activeTab, setActiveTab] = useState('overview');\n  \n  // Multi-connection manager for all configs\n  const {\n    configStats,\n    globalStats,\n    startMonitoring,\n    stopMonitoring,\n    startAllMonitoring,\n    stopAllMonitoring\n  } = useMultiConnectionManager(configs, {\n    autoStart: true,\n    maxRetries: 3,\n    healthCheckInterval: 60000 // 1 minute\n  });\n\n  // Load configs on mount\n  useEffect(() => {\n    dispatch(fetchBrokerConfigs(userId));\n  }, [dispatch, userId]);\n\n  // Auto-select first connected config\n  useEffect(() => {\n    if (configs.length > 0 && !selectedConfigId) {\n      const connectedConfig = configs.find(config => config.isConnected);\n      const configToSelect = connectedConfig || configs[0];\n      dispatch(setSelectedConfig(configToSelect.id));\n      onConfigSelect?.(configToSelect);\n    }\n  }, [configs, selectedConfigId, dispatch, onConfigSelect]);\n\n  const selectedConfig = configs.find(config => config.id === selectedConfigId);\n  const connectedConfigs = configs.filter(config => config.isConnected);\n  const disconnectedConfigs = configs.filter(config => !config.isConnected);\n\n  const handleConfigSelect = (config: BrokerConfig) => {\n    dispatch(setSelectedConfig(config.id));\n    onConfigSelect?.(config);\n  };\n\n  const handleAddBroker = () => {\n    dispatch(setShowSetupModal(true));\n    onSetupNeeded?.();\n  };\n\n  const getOverallHealthStatus = () => {\n    if (connectedConfigs.length === 0) {\n      return {\n        status: 'disconnected',\n        color: 'text-gray-600',\n        bgColor: 'bg-gray-100',\n        icon: <WifiOff className=\"h-5 w-5\" />,\n        message: 'No active connections'\n      };\n    }\n\n    const hasErrors = configs.some(config => \n      config.connectionStatus?.state === 'error' || \n      configStats[config.id]?.retryCount > 0\n    );\n\n    const hasExpired = configs.some(config => \n      config.connectionStatus?.state === 'expired'\n    );\n\n    if (hasErrors) {\n      return {\n        status: 'error',\n        color: 'text-red-600',\n        bgColor: 'bg-red-100',\n        icon: <AlertTriangle className=\"h-5 w-5\" />,\n        message: 'Connection issues detected'\n      };\n    }\n\n    if (hasExpired) {\n      return {\n        status: 'expired',\n        color: 'text-orange-600',\n        bgColor: 'bg-orange-100',\n        icon: <Clock className=\"h-5 w-5\" />,\n        message: 'Authentication expired'\n      };\n    }\n\n    return {\n      status: 'connected',\n      color: 'text-green-600',\n      bgColor: 'bg-green-100',\n      icon: <CheckCircle className=\"h-5 w-5\" />,\n      message: 'All connections healthy'\n    };\n  };\n\n  const overallHealth = getOverallHealthStatus();\n\n  if (loading.configs) {\n    return (\n      <Card>\n        <CardContent className=\"flex items-center justify-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          <span className=\"ml-2 text-gray-600\">Loading broker configurations...</span>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Overall Status */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <CardTitle className=\"text-xl\">Broker Management</CardTitle>\n              <Badge variant={overallHealth.status === 'connected' ? 'default' : 'secondary'}>\n                {overallHealth.status}\n              </Badge>\n            </div>\n            <Button onClick={handleAddBroker} size=\"sm\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Broker\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            {/* Overall Health */}\n            <div className={`p-4 rounded-lg ${overallHealth.bgColor}`}>\n              <div className=\"flex items-center gap-2\">\n                {overallHealth.icon}\n                <div>\n                  <p className={`font-medium ${overallHealth.color}`}>System Health</p>\n                  <p className={`text-sm ${overallHealth.color}`}>{overallHealth.message}</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Connected Brokers */}\n            <div className=\"p-4 rounded-lg bg-blue-50\">\n              <div className=\"flex items-center gap-2\">\n                <Wifi className=\"h-5 w-5 text-blue-600\" />\n                <div>\n                  <p className=\"font-medium text-blue-600\">Connected</p>\n                  <p className=\"text-sm text-blue-600\">{connectedConfigs.length} broker(s)</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Monitoring Stats */}\n            <div className=\"p-4 rounded-lg bg-purple-50\">\n              <div className=\"flex items-center gap-2\">\n                <Activity className=\"h-5 w-5 text-purple-600\" />\n                <div>\n                  <p className=\"font-medium text-purple-600\">Monitoring</p>\n                  <p className=\"text-sm text-purple-600\">{globalStats.monitoredConfigs} active</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Retry Stats */}\n            <div className=\"p-4 rounded-lg bg-yellow-50\">\n              <div className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5 text-yellow-600\" />\n                <div>\n                  <p className=\"font-medium text-yellow-600\">Retries</p>\n                  <p className=\"text-sm text-yellow-600\">{globalStats.totalRetries} total</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Error Display */}\n      {errors.configs && (\n        <Alert variant=\"destructive\">\n          <AlertTriangle className=\"h-4 w-4\" />\n          <AlertDescription>\n            {errors.configs.message}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Main Content */}\n      {configs.length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <WifiOff className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Broker Configurations</h3>\n            <p className=\"text-gray-500 mb-6\">Get started by connecting your first broker account.</p>\n            <Button onClick={handleAddBroker}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Your First Broker\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"connections\">Connections</TabsTrigger>\n            <TabsTrigger value=\"monitoring\">Monitoring</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-4\">\n            {/* Selected Config Details */}\n            {selectedConfig && showConnectionDetails && (\n              <ConnectionStatus\n                config={selectedConfig}\n                showActions={true}\n                autoRefresh={true}\n                onReconnectNeeded={() => handleAddBroker()}\n              />\n            )}\n\n            {/* Config List */}\n            <div className=\"grid gap-4\">\n              {configs.map((config) => {\n                const isSelected = selectedConfigId === config.id;\n                const stats = configStats[config.id];\n                \n                return (\n                  <Card \n                    key={config.id} \n                    className={`cursor-pointer transition-all ${\n                      isSelected ? 'ring-2 ring-blue-500' : 'hover:shadow-md'\n                    }`}\n                    onClick={() => handleConfigSelect(config)}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className={`w-3 h-3 rounded-full ${\n                            config.isConnected ? 'bg-green-500' : 'bg-gray-400'\n                          }`} />\n                          <div>\n                            <h4 className=\"font-medium capitalize\">{config.brokerName}</h4>\n                            <p className=\"text-sm text-gray-500\">API Key: {config.apiKey}</p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center gap-2\">\n                          {stats?.retryCount > 0 && (\n                            <Badge variant=\"destructive\" className=\"text-xs\">\n                              {stats.retryCount} retries\n                            </Badge>\n                          )}\n                          \n                          {stats?.isMonitoring && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              <Activity className=\"h-3 w-3 mr-1\" />\n                              Monitoring\n                            </Badge>\n                          )}\n                          \n                          <Badge variant={config.isConnected ? 'default' : 'secondary'}>\n                            {config.isConnected ? 'Connected' : 'Disconnected'}\n                          </Badge>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"connections\" className=\"space-y-4\">\n            {/* Connected Configs */}\n            {connectedConfigs.length > 0 && (\n              <div>\n                <h3 className=\"text-lg font-medium mb-3\">Connected Brokers</h3>\n                <div className=\"space-y-4\">\n                  {connectedConfigs.map((config) => (\n                    <ConnectionStatus\n                      key={config.id}\n                      config={config}\n                      showActions={true}\n                      autoRefresh={true}\n                      onReconnectNeeded={() => handleAddBroker()}\n                    />\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Disconnected Configs */}\n            {disconnectedConfigs.length > 0 && (\n              <div>\n                <h3 className=\"text-lg font-medium mb-3\">Disconnected Brokers</h3>\n                <div className=\"space-y-4\">\n                  {disconnectedConfigs.map((config) => (\n                    <Card key={config.id} className=\"border-gray-200\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-3\">\n                            <WifiOff className=\"h-5 w-5 text-gray-400\" />\n                            <div>\n                              <h4 className=\"font-medium capitalize\">{config.brokerName}</h4>\n                              <p className=\"text-sm text-gray-500\">Not connected</p>\n                            </div>\n                          </div>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => handleConfigSelect(config)}\n                          >\n                            <Settings className=\"h-4 w-4 mr-2\" />\n                            Configure\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"monitoring\" className=\"space-y-4\">\n            {/* Monitoring Controls */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Activity className=\"h-5 w-5\" />\n                  Connection Monitoring\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex gap-2\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={startAllMonitoring}\n                    disabled={globalStats.monitoredConfigs === connectedConfigs.length}\n                  >\n                    Start All Monitoring\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={stopAllMonitoring}\n                    disabled={globalStats.monitoredConfigs === 0}\n                  >\n                    Stop All Monitoring\n                  </Button>\n                </div>\n                \n                <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                  <div>\n                    <span className=\"font-medium\">Monitored:</span>\n                    <span className=\"ml-2\">{globalStats.monitoredConfigs}</span>\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Total Retries:</span>\n                    <span className=\"ml-2\">{globalStats.totalRetries}</span>\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Active Retries:</span>\n                    <span className=\"ml-2\">{globalStats.activeRetries}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Individual Config Monitoring */}\n            <div className=\"space-y-4\">\n              {configs.map((config) => {\n                const stats = configStats[config.id];\n                return (\n                  <Card key={config.id}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium capitalize\">{config.brokerName}</h4>\n                          <p className=\"text-sm text-gray-500\">\n                            Retries: {stats?.retryCount || 0} | \n                            Monitoring: {stats?.isMonitoring ? 'Active' : 'Inactive'}\n                          </p>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          {!stats?.isMonitoring ? (\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => startMonitoring(config)}\n                              disabled={!config.isConnected}\n                            >\n                              Start Monitoring\n                            </Button>\n                          ) : (\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => stopMonitoring(config.id)}\n                            >\n                              Stop Monitoring\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          </TabsContent>\n        </Tabs>\n      )}\n    </div>\n  );\n};\n\nexport default BrokerManager;"